Задание 4. Оценка узких мест при миграции

    4.1.1. Проанализировать ситуацию
        Текущая система:
            - Монолитная архитектура (1С, Excel, локальный сервер)
            - Все компоненты тесно связаны (изменение в одном модуле влияет на всю систему)
            - Низкая отказоустойчивость (единая точка отказа)
        Цели миграции:
            - Повышение масштабируемости (поддержка роста числа филиалов)
            - Улучшение отказоустойчивости (изоляция сбоев)
            - Ускорение разработки (независимые команды для разных сервисов)

    4.1.2. Ключевые процессы и компоненты, затрагиваемые миграцией
        | Компонент            | Риски при переходе на микросервисы            | Потенциальные узкие места                                                                 |
        |----------------------|-----------------------------------------------|------------------------------------------------------------------------------------------|
        | **Базы данных**      | Разделение единой БД на несколько             | Сложность синхронизации данных между сервисами; Потеря транзакционной целостности; Рост сетевой нагрузки |
        | **Коммуникация**     | Замена прямых вызовов на API                  | Задержки в сетевых вызовах; Каскадные сбои; Сложность отладки распределённых транзакций |
        | **Серверное оборудование** | Переход на облако/контейнеры            | Недостаточные ресурсы CPU/RAM; Проблемы балансировки нагрузки; Задержки хранилища |
        | **Бизнес-логика**   | Разделение на независимые сервисы              | Дублирование кода; Проблемы консистентности данных; Сложность мониторинга процессов |
        | **Безопасность**     | Индивидуальные политики доступа для сервисов  | Усложнение аутентификации; Риски утечек через API; Сложность распределённого аудита |
        | **CI/CD**           | Автоматизация деплоя множества сервисов        | Конфликты версий; Долгое время сборки; Проблемы отката изменений |

    Планы работ:
        Для баз данных
            - Использовать шаблон Saga для распределённых транзакций
            - Внедрить кэширование (Redis) для снижения нагрузки
            - Настроить репликацию и мониторинг задержек (PostgreSQL Patroni, Prometheus)
        Для коммуникации
            - Добавить API Gateway (Kong) для управления запросами
            - Внедрить механизмы retry и circuit breaker
            - Использовать асинхронную связь через брокеры сообщений (Kafka)
        Для инфраструктуры
            - Начать с гибридного облака (постепенный перенос сервисов)
            - Автоматизировать оркестрацию (Kubernetes + Terraform
            - Настроить логирование и трейсинг (Jaeger, ELK Stack)
        Для безопасности
            - Внедрить Service Mesh (Istio, Linkerd) для шифрования трафика
            - Использовать централизованный IAM (Keycloak)
            - Регулярно сканировать уязвимости в контейнерах (Trivy, Clair)
    
    4.2. Построить диаграмму Исикавы.
        Ссылка на диаграмму: https://drive.google.com/file/d/1Qyw1_hHed1fXOdJ0HGuW-VUELT0L46Ec/view?usp=sharing


    4.3. Выделить основные категории и для каждой указать возможные проблемы
        Люди:
            - Нехватка навыков работы с микросервисами
            - Консервативность команды
        Процессы:
            - Отсутствие автоматизированного пайплайна развёртывания
            - Неформализованные этапы миграции
        Технологии:
            - Жёсткая связность компонентов монолита
            - Плохо спроектированные API между сервисами
        Данные:
            - Нарушение ACID-транзакций при распределённом хранении
            - Медленные запросы из-за JOIN между сервисами
        Инфраструктура:
            - Недостаточная мощность кластера Kubernetes
            - Высокий latency между облачными зонами
        Безопасность:
            - Усложнение управления правами доступа
            - Открытые порты в service mesh

    4.4. Предложить рекомендации

        4.4.1. Составить краткий список мер по устранению выявленных узких мест на основе диаграммы

        | Категория |	Меры	| Приоритет	|
        |-----------| ----------| ----------|
        | Инфраструктура| - Увеличить мощность кластера Kubernetes (CPU/RAM)|	Высокий	|
        |               | - Настроить мониторинг задержек сети (Prometheus + Grafana)|	Средний |
        | Технологии	| - Провести рефакторинг монолита по DDD-принципам|	Высокий	|
        |               | - Внедрить API Gateway (Kong) для управления версиями API	| Высокий|
        | Интеграция	| - Добавить механизмы retry и circuit breaker |	Высокий	|
        |               | - Настроить централизованный logging (ELK Stack) |	Средний|
        | Персонал	    | - Обучение команды: DevOps, микросервисы, DDD	| Критичный	|
        |               | - Нанять SRE для мониторинга | Высокий |
        | Процессы      | - Автоматизировать CI/CD (GitLab CI/CD + ArgoCD) | Высокий |
        |               | - Разработать чёткий план миграции с этапами и rollback-процедурами| Критичный|
        | Безопасность  | - Внедрить Service Mesh (Istio) для шифрования трафика| Высокий |
        |               | - Настроить аудит действий (Audit Log + SIEM) | Средний |

        4.4.2. Оценить приоритетность этих мер
            (в таблице)

    